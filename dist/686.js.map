{"version":3,"file":"686.js","mappings":"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","sources":["webpack://webpack-boilerplate/./src/phases/sound.js"],"sourcesContent":["import { Howl, Howler } from \"howler\";\r\nimport gsap from \"gsap\";\r\nimport ScrollTrigger from \"gsap/dist/ScrollTrigger\";\r\nimport ScrollToPlugin from \"gsap/dist/ScrollToPlugin\";\r\nfunction soundCode () {\r\n    gsap.registerPlugin(ScrollTrigger)\r\n    gsap.registerPlugin(ScrollToPlugin)\r\n    //initially\r\n$(\".r-mute-butn\").addClass(\"is--muted\");\r\n$(\".r-mute-butn\").css(\"pointer-events\", \"none\");\r\n\r\n//Header Sound Code\r\n//Header Sound Code\r\n//Header Sound Code\r\n//Header Sound Code\r\n\r\n// Constants\r\nlet heroAudio = document.querySelector(\".header-sound\");\r\nlet lyricsContainer = document.querySelector(\".header-lyrics\");\r\nconst heroPauseButn = document.querySelector(\"#hero-pause-butn\");\r\nlet IntroStart = document.querySelector(\"#header-dive\");\r\nlet lyrics = [];\r\nlet lyricTimeouts = [];\r\nlet startTime = 0;\r\nlet elapsedTime = 0;\r\nlet currentLyricIndex = 0;\r\n\r\n// Initialize event listeners\r\nIntroStart.addEventListener(\"click\", () => {\r\n  // heroAudio.play();\r\n  // heroAudio.currentTime = elapsedTime / 1000; // Resume from where it was paused\r\n  // resumeLyrics();\r\n  heroAudio.volume = 0;\r\n  headerFadeIn(heroAudio);\r\n  $(\".r-mute-butn\").removeClass(\"is--muted\");\r\n  $(\".r-mute-butn\").find(\".r-audio-text\").html(\"Sound on\");\r\n  $(\".r-mute-butn\").css(\"pointer-events\", \"auto\");\r\n});\r\n\r\n// Toggle click event\r\nheroPauseButn.addEventListener(\"click\", () => {\r\n  // if (heroAudio.paused) {\r\n  //   heroAudio.play();\r\n  //   heroAudio.currentTime = elapsedTime / 1000; // Resume from where it was paused\r\n  //   resumeLyrics();\r\n  // } else {\r\n  //   heroAudio.pause();\r\n  //   pauseLyrics();\r\n  // }\r\n  headerFadeOut(heroAudio);\r\n});\r\n\r\nheroAudio.addEventListener(\"playing\", start);\r\nheroAudio.addEventListener(\"pause\", pauseLyrics);\r\n\r\n// Listen for when the audio finishes\r\nheroAudio.addEventListener(\"ended\", () => {\r\n  resetAudioAndLyrics();\r\n});\r\n\r\nasync function loadFile(fileName) {\r\n  try {\r\n    let response = await fetch(fileName);\r\n    if (!response.ok) {\r\n      throw new Error(\"Network response was not ok\");\r\n    }\r\n    let data = await response.text();\r\n    return data.trim().split(\"\\n\"); // Break lines to array\r\n  } catch (error) {\r\n    console.error(\"Error loading file:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Parse a single line of the lyrics file\r\nfunction parseLyricLine(line) {\r\n  try {\r\n    let timeMatch = line.match(/\\[(\\d{2}):(\\d{2}\\.\\d{2})\\]/);\r\n    if (!timeMatch) return null;\r\n\r\n    let minute = parseInt(timeMatch[1]);\r\n    let second = parseFloat(timeMatch[2]);\r\n    if (isNaN(minute) || isNaN(second)) return null;\r\n\r\n    let text = line.split(\"]\").pop().trim();\r\n    return { time: (minute * 60 + second) * 1000, text };\r\n  } catch (error) {\r\n    console.error(\"Error parsing line:\", line, error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Start syncing lyrics\r\nasync function start() {\r\n  lyrics = await loadFile(\r\n    \"https://11th-hr-test1.netlify.app/lyrics-added/header-lyric.lrc\"\r\n  ).then((lines) => lines.map(parseLyricLine).filter((line) => line !== null));\r\n\r\n  startTime = Date.now() - elapsedTime;\r\n  updateLyrics();\r\n}\r\n\r\n// Update lyrics\r\nfunction updateLyrics() {\r\n  lyrics.forEach((line, index) => {\r\n    if (index >= currentLyricIndex) {\r\n      let timeout = setTimeout(() => {\r\n        if (!heroAudio.paused) {\r\n          currentLyricIndex = index;\r\n          displayLyrics(currentLyricIndex);\r\n        }\r\n      }, line.time - elapsedTime);\r\n      lyricTimeouts.push(timeout);\r\n    }\r\n  });\r\n}\r\n\r\n// Pause lyrics\r\nfunction pauseLyrics() {\r\n  elapsedTime = Date.now() - startTime; // Calculate elapsed time\r\n  clearLyricTimeouts(); // Clear all timeouts\r\n}\r\n\r\n// Resume lyrics\r\nfunction resumeLyrics() {\r\n  startTime = Date.now() - elapsedTime;\r\n  updateLyrics();\r\n}\r\n\r\n// Clear lyric timeouts\r\nfunction clearLyricTimeouts() {\r\n  lyricTimeouts.forEach((timeout) => clearTimeout(timeout));\r\n  lyricTimeouts = []; // Reset the timeouts array\r\n}\r\n\r\n// Display lyrics with vertical scrolling effect\r\nfunction displayLyrics(currentIndex) {\r\n  lyricsContainer.innerHTML = \"\"; // Clear the container\r\n\r\n  lyrics.forEach((line, index) => {\r\n    let div = document.createElement(\"div\");\r\n    div.innerText = line.text;\r\n    div.classList.add(\"lyric-line\");\r\n    if (index === currentIndex) {\r\n      div.classList.add(\"current\");\r\n    }\r\n    lyricsContainer.appendChild(div);\r\n  });\r\n\r\n  let currentLyric = lyricsContainer.querySelector(\".current\");\r\n  if (currentLyric) {\r\n    gsap.to(lyricsContainer, {\r\n      scrollTo: {\r\n        y: currentLyric,\r\n        offsetY:\r\n          lyricsContainer.offsetHeight / 2 - currentLyric.offsetHeight / 2,\r\n      },\r\n      duration: 1,\r\n      ease: \"power2.out\",\r\n    });\r\n  }\r\n}\r\n\r\n// Reset audio and lyrics when audio finishes\r\nfunction resetAudioAndLyrics() {\r\n  elapsedTime = 0;\r\n  currentLyricIndex = 0;\r\n  clearLyricTimeouts(); // Clear all timeouts\r\n\r\n  // Reset the audio and start again\r\n  heroAudio.currentTime = 0;\r\n  heroAudio.volume = 0;\r\n  headerFadeIn(heroAudio);\r\n  // heroAudio.play();\r\n\r\n  // Reset lyrics and start from the beginning\r\n  start();\r\n}\r\n\r\n//Header Sound Code End\r\n//Header Sound Code End\r\n//Header Sound Code End\r\n//Header Sound Code End\r\n\r\n//underwater sound start\r\n//underwater sound start\r\n//underwater sound start\r\n\r\n$(\"[underwater-audio-butn]\").each(function (index) {\r\n  let button = $(this);\r\n  let url = $(this).find(\".r-song-url\").text();\r\n  let song = new Howl({\r\n    src: [url],\r\n    volume: 0.3,\r\n    onend: function () {\r\n      button.removeClass(\"is--playing\");\r\n    },\r\n  });\r\n  $(this).on(\"click\", function () {\r\n    $(\"[underwater-audio-butn].is--playing\").not($(this)).click();\r\n    $(this).toggleClass(\"is--playing\");\r\n    if ($(this).hasClass(\"is--playing\")) {\r\n      song.play();\r\n      bgAudioDown(bgSound);\r\n    } else {\r\n      song.stop();\r\n      bgAudioUp(bgSound);\r\n    }\r\n  });\r\n\r\n  //fade when scrolling\r\n  //get parent\r\n  const parent = $(this).closest(\".r-uw-item-content\");\r\n  // scroll fading sound\r\n  const underwaterSound_tl = gsap.timeline({\r\n    scrollTrigger: {\r\n      trigger: parent,\r\n      start: \"top bottom\",\r\n      end: \"bottom top\",\r\n      onLeave: () => {\r\n        song.stop();\r\n        $(this).removeClass(\"is--playing\");\r\n        bgAudioUp(bgSound);\r\n      },\r\n      onLeaveBack: () => {\r\n        song.stop();\r\n        $(this).toggleClass(\"is--playing\");\r\n        bgAudioUp(bgSound);\r\n      },\r\n    },\r\n  });\r\n});\r\n\r\n//background sound-\r\nconst bgAudioUrl = document.querySelector(\".r-bg-audio\").textContent;\r\nlet bgSound = new Howl({\r\n  src: [bgAudioUrl],\r\n  volume: 0,\r\n  loop: true,\r\n});\r\n\r\n//fading sound variables\r\nlet soundDuration = 500;\r\n\r\nfunction bgAudioUp(audio) {\r\n  if (audio.volume() < 1) {\r\n    audio.fade(audio.volume(), 0.4, soundDuration);\r\n  }\r\n  // Check if the music is paused, and if so, play it\r\n  // audio.play();\r\n  if (audio.pause()) {\r\n    audio.play();\r\n  }\r\n}\r\n\r\nfunction bgAudioDown(audio) {\r\n  // Check if the volume is greater than 0 before starting the fade out\r\n  if (audio.volume() > 0) {\r\n    // Gradually decrease the volume to 0 over 1200 milliseconds (1.2 seconds)\r\n    audio.fade(audio.volume(), 0, soundDuration);\r\n\r\n    // Set a timeout to pause the audio once the fade out is complete\r\n    setTimeout(() => {\r\n      if (audio.volume() === 0) {\r\n        audio.pause();\r\n      }\r\n    }, soundDuration); // 1200 milliseconds corresponds to the fade out duration\r\n  }\r\n  console.log(\"bg paused\");\r\n}\r\n\r\n//global mute button\r\n$(\".r-mute-butn\").on(\"click\", function () {\r\n  $(this).toggleClass(\"is--muted\");\r\n  if ($(this).hasClass(\"is--muted\")) {\r\n    Howler.mute(true);\r\n    heroAudio.muted = true;\r\n    //changing inner text\r\n    $(this).find(\".r-audio-text\").html(\"Sound off\");\r\n  } else {\r\n    Howler.mute(false);\r\n    heroAudio.muted = false;\r\n    $(this).find(\".r-audio-text\").html(\"Sound on\");\r\n  }\r\n});\r\n\r\n// scroll fading sound\r\nconst fade_tl = gsap.timeline({\r\n  scrollTrigger: {\r\n    trigger: \".r-hero-trigger\",\r\n    start: \"top center\",\r\n    end: \"bottom center\",\r\n    onLeave: () => {\r\n      headerFadeOut(heroAudio);\r\n      bgAudioUp(bgSound);\r\n      // console.log(\"fading out\");\r\n    },\r\n    onEnterBack: () => {\r\n      headerFadeIn(heroAudio);\r\n      bgAudioDown(bgSound);\r\n      // console.log(\"fading in\");\r\n    },\r\n  },\r\n});\r\n\r\n// Function to gradually decrease volume\r\nfunction headerFadeOut(audio) {\r\n  const duration = 500; // Duration of fade-out effect in milliseconds\r\n  const interval = 2; // Interval for volume decrease\r\n\r\n  let targetVolume = 0; // Target volume (mute)\r\n  let currentVolume = audio.volume; // Current volume\r\n  let volumeStep = (currentVolume - targetVolume) / (duration / interval); // Volume decrease per interval\r\n\r\n  // Set volume decrementally\r\n  const decreaseVolume = () => {\r\n    if (currentVolume > targetVolume) {\r\n      currentVolume -= volumeStep;\r\n      if (currentVolume < targetVolume) {\r\n        currentVolume = targetVolume;\r\n        audio.pause();\r\n      }\r\n      audio.volume = currentVolume;\r\n      setTimeout(decreaseVolume, interval);\r\n    }\r\n  };\r\n\r\n  decreaseVolume(); // Start decreasing volume gradually\r\n}\r\n\r\nfunction headerFadeIn(audio) {\r\n  const duration = 500; // Duration of fade-in effect in milliseconds\r\n  const interval = 2; // Interval for volume increase\r\n\r\n  let targetVolume = 1; // Target volume (max volume)\r\n  let currentVolume = audio.volume; // Current volume\r\n  let volumeStep = (targetVolume - currentVolume) / (duration / interval); // Volume increase per interval\r\n\r\n  // Function to incrementally increase the volume\r\n  const increaseVolume = () => {\r\n    if (currentVolume < targetVolume) {\r\n      currentVolume += volumeStep;\r\n      if (currentVolume > targetVolume) {\r\n        currentVolume = targetVolume;\r\n      }\r\n      audio.volume = currentVolume;\r\n      setTimeout(increaseVolume, interval);\r\n    }\r\n  };\r\n\r\n  // Play audio and start increasing volume\r\n  if (audio.paused) {\r\n    audio.play();\r\n    audio.currentTime = elapsedTime / 1000; // Resume from where it was paused\r\n  }\r\n  increaseVolume();\r\n}\r\n}\r\n\r\nexport default soundCode;"],"names":["registerPlugin","$","addClass","css","heroAudio","document","querySelector","lyricsContainer","heroPauseButn","IntroStart","lyrics","lyricTimeouts","startTime","elapsedTime","currentLyricIndex","parseLyricLine","line","timeMatch","match","minute","parseInt","second","parseFloat","isNaN","time","text","split","pop","trim","error","console","async","start","response","fetch","ok","Error","loadFile","then","lines","map","filter","Date","now","forEach","index","timeout","setTimeout","paused","currentIndex","innerHTML","div","createElement","innerText","classList","add","appendChild","currentLyric","to","scrollTo","y","offsetY","offsetHeight","duration","ease","displayLyrics","push","clearLyricTimeouts","clearTimeout","addEventListener","volume","headerFadeIn","removeClass","find","html","headerFadeOut","currentTime","each","button","this","url","song","Howl","src","onend","on","not","click","toggleClass","hasClass","play","bgAudioDown","bgSound","stop","bgAudioUp","parent","closest","timeline","scrollTrigger","trigger","end","onLeave","onLeaveBack","bgAudioUrl","textContent","loop","soundDuration","audio","fade","pause","log","currentVolume","volumeStep","decreaseVolume","increaseVolume","Howler","mute","muted","onEnterBack"],"sourceRoot":""}